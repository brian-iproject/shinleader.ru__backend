<? require($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_before.php");
header('Content-type: application/json; charset=utf-8');
require(dirname(__FILE__)."/lang/" . LANGUAGE_ID . "/script.php");

ob_start();

if(!function_exists('json_encode')){
    function json_encode($value){
        if(is_int($value)){
			return (string)$value;
		} 
		elseif(is_string($value)){
	        $value = str_replace(array('\\', '/', '"', "\r", "\n", "\b", "\f", "\t"),  array('\\\\', '\/', '\"', '\r', '\n', '\b', '\f', '\t'), $value);
	        $convmap = array(0x80, 0xFFFF, 0, 0xFFFF);
	        $result = "";
	        for ($i = mb_strlen($value) - 1; $i >= 0; $i--){
	            $mb_char = mb_substr($value, $i, 1);
	            if (mb_ereg("&#(\\d+);", mb_encode_numericentity($mb_char, $convmap, "UTF-8"), $match)) { $result = sprintf("\\u%04x", $match[1]) . $result;  } 
				else { $result = $mb_char . $result;  }
	        }
	        return '"' . $result . '"';                
        } 
		elseif(is_float($value)) { return str_replace(",", ".", $value); } 
		elseif(is_null($value)) {  return 'null';} 
		elseif(is_bool($value)) { return $value ? 'true' : 'false';   } 
		elseif(is_array($value)){
            $with_keys = false;
            $n = count($value);
            for ($i = 0, reset($value); $i < $n; $i++, next($value))  { if (key($value) !== $i) {  $with_keys = true; break;  }  }
        } 
		elseif (is_object($value)) { $with_keys = true; } 
		else { return ''; }
        $result = array();
        if ($with_keys)  {  foreach ($value as $key => $v) {  $result[] = json_encode((string)$key) . ':' . json_encode($v); }  return '{' . implode(',', $result) . '}'; } 
		else {  foreach ($value as $key => $v) { $result[] = json_encode($v); } return '[' . implode(',', $result) . ']';  }
    } 
}

if(!function_exists('getJson')) {
	function getJson($message, $res='N', $error=''){
		global $APPLICATION;
		$result = array(
			'result' => $res=='Y'?'Y':'N',
			'message' => $APPLICATION->ConvertCharset($message, SITE_CHARSET, 'utf-8')
		);
		if (strlen($error) > 0) { $result['err'] = $APPLICATION->ConvertCharset($error, SITE_CHARSET, 'utf-8'); }
		return json_encode($result);
	}
}

if(!CModule::IncludeModule('sale') || !CModule::IncludeModule('iblock') || !CModule::IncludeModule('catalog') || !CModule::IncludeModule('currency')){
	die(getJson(GetMessage('CANT_INCLUDE_MODULE')));
}

global $APPLICATION, $USER;
$user_registered = false;
$orderPrice = 0;
$orderList = '';
$bAllBasketBuy = $_POST['BUY_TYPE'] == 'ALL';
$_POST['ONE_CLICK_BUY']['FIO'] = $APPLICATION->ConvertCharset($_POST['ONE_CLICK_BUY']['FIO'], 'utf-8', SITE_CHARSET);
$_POST['ONE_CLICK_BUY']['COMMENT'] = $APPLICATION->ConvertCharset($_POST['ONE_CLICK_BUY']['COMMENT'], 'utf-8', SITE_CHARSET);

// check input data
if(!empty($_POST['ONE_CLICK_BUY']['EMAIL']) && !preg_match('/^[0-9a-zA-Z\-_\.]+@[0-9a-zA-Z\-]+[\.]{1}[0-9a-zA-Z\-]+[\.]?[0-9a-zA-Z\-]+$/', $_POST['ONE_CLICK_BUY']['EMAIL'])) die(getJson(GetMessage('BAD_EMAIL_FORMAT')));
elseif(empty($_POST['ONE_CLICK_BUY']['PHONE'])) die(getJson(GetMessage('NO_PHONE')));
elseif(empty($_POST['ONE_CLICK_BUY']['FIO'])) die(getJson(GetMessage('NO_USER_NAME')));

$basketUserID = CSaleBasket::GetBasketUserID();

// register user if not registered
if(!$USER->IsAuthorized()){
	if(!isset($_POST['ONE_CLICK_BUY']['EMAIL']) || trim($_POST['ONE_CLICK_BUY']['EMAIL']) == ''){
		$login = 'user_' . substr((microtime(true) * 10000), 0, 12);
		if (strlen(SITE_SERVER_NAME)) { $server_name = SITE_SERVER_NAME; } else { $server_name = $_SERVER["SERVER_NAME"];}
		$server_name = Cutil::translit($server_name, "ru");
		if($dotPos = strrpos($server_name, "_")){
			$server_name = substr($server_name, 0, $dotPos).str_replace("_", ".", substr($server_name, $dotPos));
		}
		else{
			$server_name .= ".ru";
		}
		$_POST['ONE_CLICK_BUY']['EMAIL'] = $login . '@' . $server_name;
		$user_registered = true;
	} 
	else{
		$dbUser = CUser::GetList(($by = 'ID'), ($order = 'ASC'), array('=EMAIL' => trim($_POST['ONE_CLICK_BUY']['EMAIL'])));
		if($dbUser->SelectedRowsCount() == 0){
			$login = 'user_' . substr((microtime(true) * 10000), 0, 12);
			$user_registered = true;
		} 
		elseif($dbUser->SelectedRowsCount() == 1){
			$ar_user = $dbUser->Fetch();
			$registeredUserID = $ar_user['ID'];
		}
		else die(getJson(GetMessage('TOO_MANY_USERS')));
	}

	if($user_registered){
		$captcha = COption::GetOptionString('main', 'captcha_registration', 'N');
		if($captcha == 'Y'){COption::SetOptionString('main', 'captcha_registration', 'N');}
		$userPassword = randString(10);
		$username = explode(' ', trim($_POST['ONE_CLICK_BUY']['FIO']));
		$newUser = $USER->Register($login, $username[0], $username[1], $userPassword,  $userPassword, $_POST['ONE_CLICK_BUY']['EMAIL']);
		if($captcha == 'Y'){
			COption::SetOptionString('main', 'captcha_registration', 'Y');
		}
		if($newUser['TYPE'] == 'ERROR') {
			die(getJson(GetMessage('USER_REGISTER_FAIL'), 'N', $newUser['MESSAGE']));
		} 
		else{
			$registeredUserID = $newUser['ID'];
			if (!empty($_POST['ONE_CLICK_BUY']['PHONE']) && ($arParams["AUTO_LOGOUT"]=="Y")) {
				$USER->Update($registeredUserID,  array('PERSONAL_PHONE' => $_POST['ONE_CLICK_BUY']['PHONE']));
			}
			$USER->Logout();
		}
	}
}
else{
	$registeredUserID = $USER->GetID();
}

if(!$_POST['ONE_CLICK_BUY']['EMAIL']){
	$_POST['ONE_CLICK_BUY']['EMAIL'] = $USER->GetEmail();
}

if(!$_POST['ONE_CLICK_BUY']['LOCATION']){
	$arLocation = CSaleOrderProps::GetList(array("SORT" => "ASC"), array("PERSON_TYPE_ID" => intval($_POST['PERSON_TYPE_ID']) > 0 ? $_POST['PERSON_TYPE_ID']: 1, "CODE" => "LOCATION"), false, false, array())->Fetch();
   	$_POST['ONE_CLICK_BUY']['LOCATION'] = $arLocation["DEFAULT_VALUE"];
}

$newOrder = array(
	'LID' => SITE_ID,
	'PERSON_TYPE_ID' => intval($_POST['PERSON_TYPE_ID']) > 0 ? $_POST['PERSON_TYPE_ID']: 1,
	'PAYED' => 'N',
	/*'CURRENCY' => $_POST['CURRENCY'],*/
	'USER_ID' => $registeredUserID,
	'USER_DESCRIPTION' => $_POST['ONE_CLICK_BUY']['COMMENT'],
	'PRICE' => 1,
);
if($_POST['DELIVERY_ID'] > 0) $newOrder['DELIVERY_ID'] = $_POST['DELIVERY_ID'];
if($_POST['PAY_SYSTEM_ID'] > 0) $newOrder['PAY_SYSTEM_ID'] = $_POST['PAY_SYSTEM_ID'];

if($bAllBasketBuy){
	$arBasketItems = array();
	$db_basket_items = CSaleBasket::GetList(array('SORT' => 'DESC'), array('FUSER_ID' => $basketUserID, 'LID' => SITE_ID, 'ORDER_ID' => 'NULL', 'DELAY' => 'N'));
	
	while($arItem = $db_basket_items->Fetch()){
		$arBasketItems1[] = $arItem;
		/*set*/
		if (CSaleBasketHelper::isSetItem($arItem))
		continue;
		$arBasketItems[] = $arItem;
		if(!$currency){
			$currency =  CCurrencyLang::GetByID($arItem['CURRENCY'], LANGUAGE_ID);
			$currencyThousandsSep = (!$currency["THOUSANDS_VARIANT"] ? $currency["THOUSANDS_SEP"] : ($currency["THOUSANDS_VARIANT"] == "S" ? " " : ($currency["THOUSANDS_VARIANT"] == "D" ? "." : ($currency["THOUSANDS_VARIANT"] == "C" ? "," : ($currency["THOUSANDS_VARIANT"] == "B" ? "\xA0" : "")))));
		}
		if($arItem['CAN_BUY'] == 'Y'){
			$curPrice = roundEx($arItem['PRICE'], SALE_VALUE_PRECISION) * DoubleVal($arItem['QUANTITY']);
			$orderPrice += $curPrice;
			$orderList .= GetMessage('ITEM_NAME') . $arItem['NAME']
				. GetMessage('ITEM_PRICE') . str_replace('#', number_format($arItem['PRICE'], $currency["DECIMALS"], $currency["DEC_POINT"], $currencyThousandsSep), $currency['FORMAT_STRING'])
				. GetMessage('ITEM_QTY') . intval($arItem['QUANTITY'])
				. GetMessage('ITEM_TOTAL') . str_replace('#', number_format($curPrice, $currency["DECIMALS"], $currency["DEC_POINT"], $currencyThousandsSep), $currency['FORMAT_STRING']) . "\n";
		}
	}	
	if($arBasketItems){
		$newOrder["CURRENCY"] = $currency["CURRENCY"];
		$orderID = CSaleOrder::Add($newOrder);
		if($orderID == false){
			$strError = '';
			if($ex = $APPLICATION->GetException()) $strError = $ex->GetString();
			die(getJson(GetMessage('ORDER_CREATE_FAIL'), 'N', $strError));
		}
				
		if($orderID){
			CSaleBasket::OrderBasket($orderID, $basketUserID, SITE_ID, false);
			
			$dbBasketItems = CSaleBasket::GetList(array("ID" => "ASC"), array("FUSER_ID" => $basketUserID, "LID" => SITE_ID, "ORDER_ID" => $orderID), false, false,	array("ID", "CALLBACK_FUNC", "MODULE", "PRODUCT_ID", "QUANTITY", "DELAY", "CAN_BUY", "PRICE", "WEIGHT", "NAME", "DISCOUNT_PRICE", "CURRENCY", "PRODUCT_PROVIDER_CLASS", "DIMENSIONS","TYPE", "SET_PARENT_ID"));
			$arResult["ORDER_PRICE"] = 0;
			$arOrderForDiscount = array(
				'SITE_ID' => SITE_ID,
				'USER_ID' => $registeredUserID,
				'ORDER_PRICE' => $orderPrice,
				'ORDER_WEIGHT' => 0,
				'PRICE_DELIVERY' => $arResult["DELIVERY_PRICE"],
				'BASKET_ITEMS' => array(),
				"PERSON_TYPE_ID" => intval($_POST['PERSON_TYPE_ID']) > 0 ? $_POST['PERSON_TYPE_ID'] : 1,
				"PAY_SYSTEM_ID" => $newOrder['PAY_SYSTEM_ID'],
				"DELIVERY_ID" => $newOrder['DELIVERY_ID'],
			);
			while($arOneItem = $dbBasketItems->GetNext()){
				/*set*/
				if (CSaleBasketHelper::isSetItem($arOneItem))
				continue;
				$arOrderForDiscount['BASKET_ITEMS'][] = $arOneItem;
				$arOrderForDiscount['ORDER_WEIGHT'] += doubleval($arOneItem['WEIGHT']);
			}
			
			$arDiscountOptions = $arDiscountErrors = array();
			CSaleDiscount::DoProcessOrder($arOrderForDiscount, $arDiscountOptions, $arDiscountErrors);
			$arResult["ORDER_PRICE"] = 0;
			foreach($arOrderForDiscount['BASKET_ITEMS'] as &$arOneItem){
				$arResult["ORDER_PRICE"] += doubleval($arOneItem['PRICE']) * doubleval($arOneItem['QUANTITY']);
				$arBasketInfo = array('IGNORE_CALLBACK_FUNC' => 'Y', 'PRICE' => $arOneItem['PRICE']);
				if(array_key_exists('DISCOUNT_PRICE', $arOneItem)){
					$arBasketInfo['DISCOUNT_PRICE'] = $arOneItem['DISCOUNT_PRICE'];
				}
				CSaleBasket::Update($arOneItem['ID'], $arBasketInfo);
			}
			if(isset($arOneItem)){
				unset($arOneItem);
			}
			$orderPrice = $arResult["ORDER_PRICE"] + $arResult["DELIVERY_PRICE"] + $arResult["TAX_PRICE"] - $arResult["DISCOUNT_PRICE"];
		}		
	}
} 
else{
	$arProps = array();
	$iblockID = intval($_POST['IBLOCK_ID']);
	$product_desc_string = '';
	$useSku = $_POST['USE_SKU'] == 'Y';
	$product_quantity = (intVal($_POST['ELEMENT_QUANTITY']) > 0 ? intVal($_POST['ELEMENT_QUANTITY']) : 1);			
	
	$db_product = CIBlockElement::GetByID($_POST['ELEMENT_ID']);
	$arProduct = $db_product->GetNext();
	
	if($useSku){
		// if use buy offer, need get detail page url of it`s good (for admin backend)
		$detailPageURL = "";
		$arCatalog = CCatalog::GetByID($arProduct['IBLOCK_ID']);
		if(is_array($arCatalog) && intval($arCatalog['PRODUCT_IBLOCK_ID']) > 0 && intval($arCatalog['SKU_PROPERTY_ID']) > 0){
			$dbSKUProp = CIBlockElement::GetProperty($arProduct['IBLOCK_ID'], $_POST['ELEMENT_ID'],array(),array('ID' => $arCatalog['SKU_PROPERTY_ID']));
			if($arSKUProp = $dbSKUProp->Fetch()){
				if(0 < intval($arSKUProp['VALUE'])){
					$db_parent = CIBlockElement::GetByID($arSKUProp['VALUE']);
					$ar_parent = $db_parent->GetNext();
					$detailPageURL = $ar_parent['DETAIL_PAGE_URL'];
				}
			}
		}
		$arProduct['DETAIL_PAGE_URL'] = $detailPageURL;
	}		

	if($useSku && $iblockID > 0){
		// get properties of this offer
		$skuCodes = explode('|', $_POST['SKU_CODES']);
		if(is_array($skuCodes)){
			foreach ($skuCodes as $k => $v) { if ($v === '') unset($skuCodes[$k]); }
			if (!empty($skuCodes)) $arProps = CIBlockPriceTools::GetOfferProperties($_POST['ELEMENT_ID'], $iblockID, $skuCodes);
		}
	}
	
	// add to basket with default price currency
	// if product is cost $100 and defuult currency is RUB, than basket product will cost ~3000 RUB
	$added = Add2BasketByProductID($_POST['ELEMENT_ID'], $product_quantity, array(), $arProps);
	if(!$added){
		$strError = '';
		if($ex = $APPLICATION->GetException()) {$strError = $ex->GetString();}
		die(getJson(GetMessage('ITEM_ADD_FAIL'), 'N', $strError));
	} 
	else{
		$ar_basket_item = CSaleBasket::GetByID($added);
		$currency = CCurrencyLang::GetByID($ar_basket_item['CURRENCY'], LANGUAGE_ID);		
		
		// convert basket product to product currency
		/*
		$arBasketPriceProduct = CPrice::GetByID($ar_basket_item["PRODUCT_PRICE_ID"]);
		if($arBasketPriceProduct["CURRENCY"] != $ar_basket_item["CURRENCY"]){
			$currency = CCurrencyLang::GetByID($arBasketPriceProduct["CURRENCY"], LANGUAGE_ID);		
			$ar_basket_item['PRICE'] = CCurrencyRates::ConvertCurrency($ar_basket_item['PRICE'], $ar_basket_item["CURRENCY"], $currency['CURRENCY']);
			CSaleBasket::Update($ar_basket_item['ID'], array('PRICE' => $ar_basket_item['PRICE'], 'CURRENCY' => $currency['CURRENCY']));
		}
		*/
		
		$currencyThousandsSep = (!$currency["THOUSANDS_VARIANT"] ? $currency["THOUSANDS_SEP"] : ($currency["THOUSANDS_VARIANT"] == "S" ? " " : ($currency["THOUSANDS_VARIANT"] == "D" ? "." : ($currency["THOUSANDS_VARIANT"] == "C" ? "," : ($currency["THOUSANDS_VARIANT"] == "B" ? "\xA0" : "")))));		
		$orderPrice += roundEx($ar_basket_item['PRICE'], SALE_VALUE_PRECISION) * DoubleVal($ar_basket_item['QUANTITY']);
		$orderList .= GetMessage('ITEM_NAME') . $arProduct['NAME'] . $product_desc_string . GetMessage('ITEM_PRICE') . str_replace('#', number_format($ar_basket_item['PRICE'], $currency["DECIMALS"], $currency["DEC_POINT"], $currencyThousandsSep), $currency['FORMAT_STRING']) . GetMessage('ITEM_QTY') . intval($ar_basket_item['QUANTITY']). GetMessage('ITEM_TOTAL') . str_replace('#', number_format((roundEx($ar_basket_item['PRICE'], SALE_VALUE_PRECISION) * DoubleVal($ar_basket_item['QUANTITY'])), $currency["DECIMALS"], $currency["DEC_POINT"], $currencyThousandsSep), $currency['FORMAT_STRING']) . "\n";
			
		$newOrder["CURRENCY"] = $currency["CURRENCY"];
		$orderID = CSaleOrder::Add($newOrder);
		if($orderID == false){
			$strError = '';
			if($ex = $APPLICATION->GetException()) $strError = $ex->GetString();
			die(getJson(GetMessage('ORDER_CREATE_FAIL'), 'N', $strError));
		}
		
		CSaleBasket::Update($ar_basket_item['ID'], array('ORDER_ID' => $orderID));

		/*$arOrderDat = CSaleOrder::DoCalculateOrder(
			SITE_ID,
			$USER->GetID(),
			$ar_basket_item["BASKET_ITEMS"],
			$newOrder['PERSON_TYPE_ID'],
			array(),
			$newOrder['DELIVERY_ID'],
			$newOrder['PAY_SYSTEM_ID'],
			array(),
			$arErrors,
			$arWarnings
		);
		$orderID = (int)CSaleOrder::DoSaveOrder($arOrderDat, $arFields, 0, $arResult["ERROR"]);*/
		//CSaleBasket::OrderBasket($orderID, CSaleBasket::GetBasketUserID(), SITE_ID, false);
		// CSaleBasket::DoSaveOrderBasket($orderID, $newOrder["SITE_ID"], $newOrder["USER_ID"], $ar_basket_item, $arErrors, $arCoupons, $arStoreBarcodeOrderFormData, $bSaveBarcodes);
       	// CSaleBasket::Update($ar_basket_item['ID'], array('ORDER_ID' => $orderID));
	}
}
CSaleOrder::Update($orderID, array("PRICE" => $orderPrice));
$arOrder = CSaleOrder::GetByID($orderID);
$res = CSaleOrderProps::GetList(array(), array('@CODE' => unserialize($_POST["PROPERTIES"])));
$personType = intval($_POST['PERSON_TYPE_ID']) > 0 ? $_POST['PERSON_TYPE_ID']: 1;
while($prop = $res->Fetch()){
	if($_POST['ONE_CLICK_BUY'][$prop['CODE']] && ($prop["PERSON_TYPE_ID"]==$personType)){
		CSaleOrderPropsValue::Add(array( 'ORDER_ID' => $orderID, 'NAME' => $prop['NAME'], 'ORDER_PROPS_ID' => $prop['ID'], 
										 'CODE' => $prop['CODE'], 'VALUE' => $_POST['ONE_CLICK_BUY'][$prop['CODE']]));
	}
}

$_SESSION['SALE_BASKET_NUM_PRODUCTS'][SITE_ID] = 0;

$arMessageFields = array(
	"RS_ORDER_ID" => $orderID,
	"CLIENT_NAME" => $_POST['ONE_CLICK_BUY']['FIO'],
	"PHONE" => $_POST["ONE_CLICK_BUY"]["PHONE"],
	"ORDER_ITEMS" => $orderList,
	"ORDER_PRICE" => str_replace('#', number_format($orderPrice, $currency["DECIMALS"], $currency["DEC_POINT"], $currencyThousandsSep), $currency['FORMAT_STRING']),
	"COMMENT" => $_POST['ONE_CLICK_BUY']['COMMENT'],
	"RS_DATE_CREATE" => ConvertTimeStamp(false, "FULL"),
);
							
CEvent::Send("NEW_ONE_CLICK_BUY_".SITE_ID, SITE_ID, $arMessageFields);

/*bind sale events*/
foreach(GetModuleEvents("sale", "OnSaleComponentOrderOneStepComplete", true) as $arEvent)
	ExecuteModuleEventEx($arEvent, Array($orderID, $arOrder, $arParams));

ob_clean();

die(getJson($orderID, 'Y'));
?>